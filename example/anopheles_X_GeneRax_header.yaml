## Reconstruting ancestral gene orders of the X chromosome of Anopheles mosquito genomes
run:
   # Run name
   - &run_name            'anopheles_X_GeneRax'
   # Root directory created by cloning the AGO pipline github repo
   - &run_dir_root        '/home/chauvec/projects/ctb-chauvec/AGO-pipeline'
   # VectorBase data
   - &run_vectorbase_data !join [*run_dir_root, 'data', 'VectorBase']
   # Directory containing the AGO pipeline scripts
   - &run_dir_scripts     !join [*run_dir_root, 'scripts']
   # Directory containing all files created by the AGO pipeline
   - &run_dir_exp         !join ['/home/chauvec/projects/ctb-chauvec/AGO-pipeline', 'example', *run_name]
   # Directory containing local installations of external tools
   - &run_dir_bin         !join [*run_dir_root, 'bin']
slurm:
   # Local account used to run slurm jobs
   account: &slurm_account 'def-chauvec'
dir:
   # Directory containing the input used by AGO and the output files created by AGO
   data:    &dir_data    !join [*run_dir_exp, 'data']
   # Directory containing the input files and running scripts for each external tool
   aux:     &dir_aux     !join [*run_dir_exp, 'aux']
   # Directory containing the log files of external tools and the AGO log files
   log:     &dir_log     !join [*run_dir_exp, 'log']
   # Directory containing the statistics files created by AGO
   stats:   &dir_stats   !join [*run_dir_exp, 'statistics']
   # Directory containing the results of external tools
   results: &dir_results !join [*run_dir_exp, 'results']
data:
   # Paths to starting (extisting data) input files
   species_tree:
      path: &data_species_tree_path      !join [*run_vectorbase_data, 'species_tree_4.newick']
   species:
      path: &data_species_path           !join [*run_vectorbase_data, 'species_4.txt']
   families:
      path: &data_families_path          !join [*run_vectorbase_data, 'families_X_4.txt']
      sep:  &species_gene_name_separator '|'
   gene_orders:
      path: &data_gene_orders_path       !join [*run_vectorbase_data, 'gene_orders_X_4.txt']
   sequences:
      path: &data_sequences_path         !join [*run_vectorbase_data, 'sequences_X_4.txt']
   # Paths to computed output files (generated data, no gene trees)
   alignments:
      path: &data_alignments_path        !join [*dir_data, 'alignments_X.txt']
      NT_ext: &data_alignments_NT_ext    '_NT.fasta'
      AA_ext: &data_alignments_AA_ext    '_AA.fasta'
      ext:    &data_alignments_ext       !ref [*data_alignments_NT_ext]
   reconciliations:
      path:  &data_reconciliations_path  !join [*dir_data, 'reconciliations_X.txt']
      ext:   &data_reconciliations_ext   '.recphyloxml'
   adjacencies:
      path: &data_adjacencies_path      !join [*dir_data, 'adjacencies_X.txt']
      ext:  &data_adjacencies_ext       '_adjacencies.txt'
   ago_adjacencies:
      path: &data_ago_adjacencies_path  !join [*dir_data, 'adjacencies_ago_X.txt']
      ext:  &data_ago_adjacencies_ext   !ref [*data_adjacencies_ext]
# External tools options
tools:
   # ----------------------------------------------------------------------------------------------------
   # -- MACSE (https://bioweb.supagro.inra.fr/macse/)
   # Java is loaded as a module, each slurm process requires 8Go of memory and is allocated 2 hours of running time
   - &macse_exec                     !join [*run_dir_bin, 'macse_v2.06.jar']
   - &macse_modules                  'java'
   - &macse_slurm_options            '--mem=8G --time=02:00:00'
   # ----------------------------------------------------------------------------------------------------
   # GeneRax (https://github.com/BenoitMorel/GeneRax)
   # GeneRax is run using its MPI options, each slurm job is allocated 4Go of memory and 12 hours of computation time
   # in the undated Duplication-Loss (DL) model and GTR+G sequence evolution model
   # See https://github.com/BenoitMorel/GeneRax/wiki/GeneRax for a description of the other GeneRax options
   - &generax_exec                   !concat ['mpiexec -np 48 ', !join [*run_dir_bin, 'GeneRax', 'build', 'bin', 'generax']]
   - &generax_options                '--per-family-rates --si-quartet-support --seed 123 --rec-model UndatedDL --strategy SPR'
   - &generax_alignment_model        'GTR+G'
   - &generax_modules                ''
   - &generax_slurm_options          '--mem-per-cpu=4G --time=12:00:00 --ntasks=100'
   # ----------------------------------------------------------------------------------------------------
   # -- DeCoSTAR (https://github.com/WandrilleD/DeCoSTAR/)
   # DeCoSTAR assumes reconciliations have been computed (input gene trees data file: *data_reconciliations_path; already.reconciled=true)
   # ... parameters dupli.cost, loss.cost irrelevant (set to 0)
   # Ancestral adjacencies computed only for pairs of families with at least on extant adjacency (all.pairs=false)
   # Adjacency gain cost (Again.cost) is 2, adjacency break cost (Abreak.cost) is 1, in mode loss.aware=false (parameter loss.iteration irrelevant)
   # nb.sample=1000 adjacency trees are sampled per adjacency class, with Boltzmann temperature (boltzmann.temperature) 0.1 (will sample mostly parsimonious adjacency forests)
   # Adjacency forests are not written (write.adjacency.trees=false, parameter write.newick irrelevant)
   # See https://github.com/WandrilleD/DeCoSTAR/blob/master/docs/DeCoSTAR.odt for a description of the other DeCoSTAR options
   # (C1.advantage, absence.penalty, dated.species.tree, rooted)
   - &decostar_exec                  !join [*run_dir_bin, 'DeCoSTAR']
   - &decostar_input_path            !ref [*data_reconciliations_path]
   - &decostar_already_reconciled    'true'
   - &decostar_dupli_cost            '0'
   - &decostar_loss_cost             '0'
   - &decostar_again_cost            '2'
   - &decostar_abreak_cost           '1'
   - &decostar_loss_aware            'false'
   - &decostar_loss_iteration        '2'
   - &decostar_c1_advantage          '1'
   - &decostar_all_pairs             'false'
   - &decostar_always_again          'true'
   - &decostar_absence_penalty       '-1'
   - &decostar_dated_species_tree    'true'
   - &decostar_rooted                'true'
   - &decostar_boltzmann_temperature '0.1'
   - &decostar_nb_sample             '1000'
   - &decostar_write_newick          'true'
   - &decostar_write_adjacency_trees 'false'
   - &decostar_modules               ''
   - &decostar_slurm_options         '--mem=4G --time=24:00:00'
   # DeCoSTAR adjacency conflicts statistics are generated for thresholds from 0.1 to 1.0 by steps of 0.1
   - &decostar_stats_thresholds      "0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0"
   # ----------------------------------------------------------------------------------------------------
   # -- SPP-DCJ (https://github.com/danydoerr/spp_dcj)
   # Gurobi is available as a module and is run with an optimality parameter gap (MIPGap) of 5%
   - &sppdcj_gurobi_exec             'gurobi_cl'
   - &sppdcj_gurobi_options          'MIPGap=0.05'
   - &sppdcj_bin_dir                 !join [*run_dir_bin, 'spp_dcj', 'scripts']
   - &sppdcj_writesol_exec           !join [*sppdcj_bin_dir, 'sol2adjacencies.py']
   - &sppdcj_ilp_exec                !join [*sppdcj_bin_dir, 'spp_dcj.py']
   # The spp_dcj input adjacencies are the DeCoSTAR adjacencies of weight at least 0.5
   - &sppdcj_ilp_threshold           '0.5'
   # The spp_dcj objective function combines equally the DCJ distance and the weight of discarded adjacencies
   # (alpha = 0.5) and a weighting factor for telomeric adjacencies of 0.25 (beta = 0.25, default value defined by alpha/2).
   - &sppdcj_ilp_alpha               '0.5'
   - &sppdcj_ilp_beta                '0.25'
   # All ancestral species are considered in spp_dcj
   - &sppdcj_input_species           'all'
   - &sppdcj_input_suffix            'all'
   - &sppdcj_ilp_modules             ''
   # Gurobi is available as a module
   - &sppdcj_modules                 'gurobi'
   # The MILP creation is allocated 256Go of memory and 12 hours of computation time
   - &sppdcj_ilp_slurm_options       '--mem=256G --time=12:00:00'
   # Solving the MILP with gurobi is allocated 50Go of memory and 12 hours of computation time
   - &sppdcj_slurm_options           '--mem=50G --time=12:00:00'

